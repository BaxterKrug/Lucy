// Create Drop Down Menu
function onOpen() {
  DocumentApp.getUi().createMenu("Lucy - Writing Assistant")
    .addItem("Improve Coherence", ("ImproveCoherence"))
    .addItem("Suggest Ideas", "generateIdeas")
    .addItem("Essay Outline", "generateEssayOutline")
    .addToUi();

  DocumentApp.getUi().createMenu("Lucy - Lesson Plans")
    .addItem("Outline", "generateLessonOutline")
    .addItem("General", "generateLessonGeneral")
    .addItem("Exit Tickets", "generateExitTickets")

    .addToUi();
  DocumentApp.getUi().createMenu("Lucy - Course Development")
    .addItem("Outline", "generateLessonOutline")
    .addItem("General", "generateLessonGeneral")
    .addItem("Exit Tickets", "generateExitTickets")

    .addToUi();
}
// Fixed Variables
var apiKey = "Insert_Your_API_Key_Here";
var model = "text-davinci-003";

// Prompt list
var prompts = [
   {
    title: "Improve Coherence",
    prompt: "Improve the clarity and expand upon the following text: "
  },
  {
    title: "Suggest Ideas",
    prompt: "Provide a list of potential group activities for this lesson: "
  },
  {
    title: "Essay Outline",
    prompt: "Outline a college critical essay for: "
  },
  {
    title: "Lesson Plans - Outline",
    prompt: "Provide a lesson outline for this topic: "
  },
  {
    title: "Lesson Plans - General",
    prompt: "Based on this idea outline this lesson for a college class: "
  },
  {
    title: "Exit Tickets",
    prompt: "Provide a few exit tickets for this lesson. Justify why you might use each one. "
  }
];

// Function short hand, text should match list above exactly. 
function ImproveCoherence() {
  generatePrompt("Improve Coherence");
}

function generateIdeas() {
  generatePrompt("Suggest Ideas");
}

function generateEssayOutline() {
  generatePrompt("Essay Outline");
}

function generateLessonOutline() {
  generatePrompt("Lesson Plans - Outline");
}

function generateLessonGeneral() {
  generatePrompt("Lesson Plans - General");
}
function generateExitTickets() {
  generatePrompt("Exit Tickets");
}

//Main Function which makes the API call to GPT-3
function generatePrompt(title) {
  var prompt = prompts.find(p => p.title === title).prompt;
  var doc = DocumentApp.getActiveDocument()
  var selectedText = doc.getSelection().getRangeElements()[0].getElement().asText().getText()
  var body = doc.getBody();
  var temperature = 0;
  var maxTokens = 2060;
  
  const requestBody = {
    "model": model,
    "prompt": prompt + selectedText,
    "temperature": temperature,
    "max_tokens": maxTokens
  };
  
  const requestOptions = {
    "method": "POST",
    "headers": {
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apiKey
    },
    "payload": JSON.stringify(requestBody)
  };
  
  const response = UrlFetchApp.fetch("https://api.openai.com/v1/completions", requestOptions);
  var responseText = response.getContentText();
  var json = JSON.parse(responseText);
  Logger.log(json['choices'][0]['text']);
  var para = body.appendParagraph(json['choices'][0]['text']);
}
